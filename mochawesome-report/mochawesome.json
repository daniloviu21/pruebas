{
  "stats": {
    "suites": 11,
    "tests": 64,
    "passes": 64,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-04T05:43:13.447Z",
    "end": "2024-12-04T05:43:13.795Z",
    "duration": 348,
    "testsRegistered": 64,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2cfc466f-ccea-4955-a03d-60a7802dbebd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
          "title": "Pruebas del modulo categorias",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\categorias.test.js",
          "file": "\\test\\categorias.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo categorias\"",
              "fullTitle": "Pruebas del modulo categorias \"before each\" hook in \"Pruebas del modulo categorias\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(Categoria, 'obtenerCategorias');",
              "err": {},
              "uuid": "93dfc0cb-da1c-4b01-a467-d10c6dfcf060",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo categorias\"",
              "fullTitle": "Pruebas del modulo categorias \"after each\" hook in \"Pruebas del modulo categorias\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "2a203580-1589-475e-a465-aad0d00aa25f",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todas las categorías correctamente",
              "fullTitle": "Pruebas del modulo categorias Debe obtener todas las categorías correctamente",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const categoriasSimuladas = [\n    { id: 1, nombreCategoria: 'Electrónica', descripcion: 'Dispositivos electrónicos' },\n    { id: 2, nombreCategoria: 'Ropa', descripcion: 'Prendas de vestir' }\n];\n\nqueryStub.resolves(categoriasSimuladas);\n\nconst res = await chai.request(app).get('/api/categorias'); \nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(categoriasSimuladas);",
              "err": {},
              "uuid": "871c17be-7b0b-41e1-9fd2-9ec19bc63636",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe manejar error al obtener categorías",
              "fullTitle": "Pruebas del modulo categorias Debe manejar error al obtener categorías",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.rejects(new Error('Error al obtener categorías'));\nconst res = await chai.request(app).get('/api/categorias');\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('Error al obtener categorías');",
              "err": {},
              "uuid": "2c760570-5a67-49ce-a373-6447c7164405",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear una categoría correctamente",
              "fullTitle": "Pruebas del modulo categorias Debe crear una categoría correctamente",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nuevaCategoria = {\n    nombreCategoria: 'Ejemplo',\n    descripcion: 'Descripcion de ejemplo'\n};\nconst categoriaCreada = { id: 3, ...nuevaCategoria };\n\nsinon.stub(Categoria, 'create').resolves(categoriaCreada);\nconst res = await chai.request(app).post('/api/categorias').send(nuevaCategoria);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal(categoriaCreada);\nCategoria.create.restore();",
              "err": {},
              "uuid": "e7ecb815-bcde-48f4-8cfd-54c3733ebb47",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe manejar error al crear una categoría",
              "fullTitle": "Pruebas del modulo categorias Debe manejar error al crear una categoría",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nuevaCategoria = { nombreCategoria: 'Ejemplo', descripcion: 'Descripcion de ejemplo' };\n\nsinon.stub(Categoria, 'create').rejects(new Error('Error al crear categoría'));\nconst res = await chai.request(app).post('/api/categorias').send(nuevaCategoria);\nexpect(res.status).to.equal(500);\nexpect(res.body.error).to.equal('Error al crear categoría');\nCategoria.create.restore();",
              "err": {},
              "uuid": "8cf9c807-3e09-4e75-8cc5-a62e2fdece4a",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar una categoría correctamente",
              "fullTitle": "Pruebas del modulo categorias Debe actualizar una categoría correctamente",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    nombreCategoria: 'Ejemplo',\n    descripcion: 'Descripcion de ejemplo'\n};\nconst categoriaActualizada = {\n    id: 1,\n    nombreCategoria: 'Ejemplo',\n    descripcion: 'Descripcion de ejemplo'\n};\n\nsinon.stub(Categoria, 'update').resolves(categoriaActualizada);\nconst res = await chai.request(app).put('/api/categorias/1').send(datosActualizacion);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(categoriaActualizada);\nCategoria.update.restore();",
              "err": {},
              "uuid": "56022902-fdfd-417e-9579-5fb62c7fa126",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver 404 si no se encuentra la categoría para actualizar",
              "fullTitle": "Pruebas del modulo categorias Debe devolver 404 si no se encuentra la categoría para actualizar",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = { nombreCategoria: 'Ejemplo', descripcion: 'Descripcion de ejemplo no tengo creatividad para inventar algo' };\n\nsinon.stub(Categoria, 'update').resolves(null);\nconst res = await chai.request(app).put('/api/categorias/999').send(datosActualizacion);\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Categoria no encontrada!');\nCategoria.update.restore();",
              "err": {},
              "uuid": "dc821c83-524b-448e-9223-f6bd5273d4e2",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar una categoría correctamente",
              "fullTitle": "Pruebas del modulo categorias Debe eliminar una categoría correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const categoriaEliminada = { id: 1, deleted_at: '2024-11-12' };\n\nsinon.stub(Categoria, 'delete').resolves(categoriaEliminada);\nconst res = await chai.request(app).delete('/api/categorias/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Categoria eliminada!');\nCategoria.delete.restore();",
              "err": {},
              "uuid": "7aeabc2a-2b9e-4f84-9123-92042e62c045",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver 404 si no se encuentra la categoría para eliminar",
              "fullTitle": "Pruebas del modulo categorias Debe devolver 404 si no se encuentra la categoría para eliminar",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(Categoria, 'delete').resolves(null);\nconst res = await chai.request(app).delete('/api/categorias/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Categoria no encontrada!');\nCategoria.delete.restore();",
              "err": {},
              "uuid": "ea96450c-941f-4ea2-b9fa-743c2a1a9cc9",
              "parentUUID": "cfee35b9-8663-4ff7-bf29-dcfa4ba4dc9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "871c17be-7b0b-41e1-9fd2-9ec19bc63636",
            "2c760570-5a67-49ce-a373-6447c7164405",
            "e7ecb815-bcde-48f4-8cfd-54c3733ebb47",
            "8cf9c807-3e09-4e75-8cc5-a62e2fdece4a",
            "56022902-fdfd-417e-9579-5fb62c7fa126",
            "dc821c83-524b-448e-9223-f6bd5273d4e2",
            "7aeabc2a-2b9e-4f84-9123-92042e62c045",
            "ea96450c-941f-4ea2-b9fa-743c2a1a9cc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
          "title": "Pruebas del modulo clientes",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\clientes.test.js",
          "file": "\\test\\clientes.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo clientes\"",
              "fullTitle": "Pruebas del modulo clientes \"before each\" hook in \"Pruebas del modulo clientes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "de3a52a9-572a-47ae-bb00-05ef3b74683b",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo clientes\"",
              "fullTitle": "Pruebas del modulo clientes \"after each\" hook in \"Pruebas del modulo clientes\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "46d33973-b2a0-43ce-8777-384247670e58",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todos los clientes",
              "fullTitle": "Pruebas del modulo clientes Debe obtener todos los clientes",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const clientesSimulados = [\n    { id: 1, nombreCliente: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', correo: 'juan@example.com', telefono: '1234567890', idUsuario: 1 },\n    { id: 2, nombreCliente: 'Maria', apellidoP: 'Lopez', apellidoM: 'Garcia', correo: 'maria@example.com', telefono: '0987654321', idUsuario: 2 }\n];\nqueryStub.resolves({ rows: clientesSimulados });\nconst res = await chai.request(app).get('/api/clientes');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(clientesSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "0624975a-f5b5-4ac1-9450-9703b6457e06",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un cliente correctamente",
              "fullTitle": "Pruebas del modulo clientes Debe crear un cliente correctamente",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const clienteSimulado = { nombreCliente: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', correo: 'juan@example.com', telefono: '1234567890', idUsuario: 1 };\nconst usuarioSimulado = { usuario: 'juan', contrasenia: '12345', idRol: 2 };\nconst clienteCreado = { id: 1, ...clienteSimulado };\nconst usuarioCreado = { id: 1, ...usuarioSimulado };\nqueryStub.resolves({ rows: [clienteCreado] });\nconst res = await chai.request(app).post('/api/clientes').send({ cliente: clienteSimulado, usuario: usuarioSimulado });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('cliente');\nexpect(res.body).to.have.property('usuario');\nexpect(res.body.cliente.id).to.equal(1);\nexpect(res.body.usuario.id).to.equal(1);\n//expect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "6e75606c-d3f0-4b1b-9caf-25bf685864c1",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe obtener un cliente por ID",
              "fullTitle": "Pruebas del modulo clientes Debe obtener un cliente por ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const clienteSimulado = { id: 1, nombreCliente: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', correo: 'juan@example.com', telefono: '1234567890', idUsuario: 1 };\nqueryStub.resolves({ rows: [clienteSimulado] });\nconst res = await chai.request(app).get('/api/clientes/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(clienteSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "d63c397b-d132-477a-a39b-169229d0c74d",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un cliente y su usuario correctamente",
              "fullTitle": "Pruebas del modulo clientes Debe eliminar un cliente y su usuario correctamente",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const clienteSimulado = { id: 1, nombreCliente: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', correo: 'juan@example.com', telefono: '1234567890', idUsuario: 1 };\nqueryStub.resolves({ rows: [clienteSimulado] });\nconst res = await chai.request(app).delete('/api/clientes/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Cliente y usuario eliminados!');\n//expect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "8fc08985-ec2e-4879-93bf-f15b60a32d85",
              "parentUUID": "f737fe3a-2c75-4be7-8aeb-fe8a9d93479f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0624975a-f5b5-4ac1-9450-9703b6457e06",
            "6e75606c-d3f0-4b1b-9caf-25bf685864c1",
            "d63c397b-d132-477a-a39b-169229d0c74d",
            "8fc08985-ec2e-4879-93bf-f15b60a32d85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "da8fbc38-0837-4e97-9260-569fca481b5f",
          "title": "Pruebas del modulo cotizaciones",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\cotizaciones.test.js",
          "file": "\\test\\cotizaciones.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo cotizaciones\"",
              "fullTitle": "Pruebas del modulo cotizaciones \"before each\" hook in \"Pruebas del modulo cotizaciones\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "86a170ea-5351-44c6-935a-73c8947a6092",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo cotizaciones\"",
              "fullTitle": "Pruebas del modulo cotizaciones \"after each\" hook in \"Pruebas del modulo cotizaciones\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "9dbad121-ca0a-42d0-a7ab-639c1d39f7f4",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todas las cotizaciones",
              "fullTitle": "Pruebas del modulo cotizaciones Debe obtener todas las cotizaciones",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionesSimuladas = [\n    { id: 1, descripcion: 'Cotización 1', precio: 100, fecha: '2024-11-01', estatus: 'pendiente', formaPago: 'contado', idCliente: 1 },\n    { id: 2, descripcion: 'Cotización 2', precio: 200, fecha: '2024-11-02', estatus: 'aprobada', formaPago: 'crédito', idCliente: 2 }\n];\nqueryStub.resolves({ rows: cotizacionesSimuladas });\nconst res = await chai.request(app).get('/api/cotizaciones');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(cotizacionesSimuladas);",
              "err": {},
              "uuid": "e01d4584-e470-40b2-b174-83ca659188b2",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un arreglo vacío si no hay cotizaciones",
              "fullTitle": "Pruebas del modulo cotizaciones Debe devolver un arreglo vacío si no hay cotizaciones",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionesSimuladas = [];\nqueryStub.resolves({ rows: cotizacionesSimuladas });\nconst res = await chai.request(app).get('/api/cotizaciones');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(cotizacionesSimuladas);",
              "err": {},
              "uuid": "68726d45-84c3-43d0-bac3-03c3bf2feb6c",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear una cotización correctamente",
              "fullTitle": "Pruebas del modulo cotizaciones Debe crear una cotización correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionDatos = {\n    descripcion: 'Nueva cotización',\n    precio: 300,\n    fecha: '2024-11-12',\n    estatus: 'pendiente',\n    formaPago: 'contado',\n    idCliente: 1\n};\nconst cotizacionSimulada = {\n    id: 3,\n    ...cotizacionDatos\n};\nqueryStub.resolves({ rows: [cotizacionSimulada] });\nconst res = await chai.request(app).post('/api/cotizaciones').send(cotizacionDatos);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal(cotizacionSimulada);",
              "err": {},
              "uuid": "9c444f6a-5150-4f3f-8b7f-62474e177674",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar una cotización correctamente",
              "fullTitle": "Pruebas del modulo cotizaciones Debe actualizar una cotización correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionActualizadaDatos = {\n    descripcion: 'Cotización actualizada',\n    precio: 350,\n    fecha: '2024-11-15',\n    estatus: 'aprobada',\n    formaPago: 'crédito',\n    idCliente: 2\n};\nconst cotizacionActualizada = {\n    id: 1,\n    ...cotizacionActualizadaDatos\n};\nqueryStub.resolves({ rows: [cotizacionActualizada] });\nconst res = await chai.request(app).put('/api/cotizaciones/1').send(cotizacionActualizadaDatos);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(cotizacionActualizada);",
              "err": {},
              "uuid": "83ef8683-f39c-491d-b8df-fb5c62167e48",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta actualizar una cotización que no existe",
              "fullTitle": "Pruebas del modulo cotizaciones Debe devolver un 404 si intenta actualizar una cotización que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionActualizadaDatos = {\n    descripcion: 'Cotización inexistente',\n    precio: 400,\n    fecha: '2024-11-16',\n    estatus: 'pendiente',\n    formaPago: 'contado',\n    idCliente: 3\n};\nqueryStub.resolves({ rows: [] });\nconst res = await chai.request(app).put('/api/cotizaciones/999').send(cotizacionActualizadaDatos);\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Cotización no encontrada!');",
              "err": {},
              "uuid": "72756278-d75c-49d1-8ed6-b8ffd9d33b17",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar una cotización correctamente",
              "fullTitle": "Pruebas del modulo cotizaciones Debe eliminar una cotización correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cotizacionEliminada = { id: 1, deleted_at: '2024-11-12' };\nqueryStub.resolves({ rows: [cotizacionEliminada] });\nconst res = await chai.request(app).delete('/api/cotizaciones/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Cotización eliminada');",
              "err": {},
              "uuid": "7a9a70cb-1d19-4d16-bdee-c8e0ee0fa082",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta eliminar una cotización que no existe",
              "fullTitle": "Pruebas del modulo cotizaciones Debe devolver un 404 si intenta eliminar una cotización que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/cotizaciones/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Cotización no encontrada!');",
              "err": {},
              "uuid": "564112b4-749e-491b-9b9c-9ee630d8d406",
              "parentUUID": "da8fbc38-0837-4e97-9260-569fca481b5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e01d4584-e470-40b2-b174-83ca659188b2",
            "68726d45-84c3-43d0-bac3-03c3bf2feb6c",
            "9c444f6a-5150-4f3f-8b7f-62474e177674",
            "83ef8683-f39c-491d-b8df-fb5c62167e48",
            "72756278-d75c-49d1-8ed6-b8ffd9d33b17",
            "7a9a70cb-1d19-4d16-bdee-c8e0ee0fa082",
            "564112b4-749e-491b-9b9c-9ee630d8d406"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
          "title": "Pruebas del módulo DepartamentosController",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\departamentos.test.js",
          "file": "\\test\\departamentos.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del módulo DepartamentosController\"",
              "fullTitle": "Pruebas del módulo DepartamentosController \"before each\" hook in \"Pruebas del módulo DepartamentosController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();\nqueryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "4f85154c-b6b5-454f-bde0-5cc515da08b7",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del módulo DepartamentosController\"",
              "fullTitle": "Pruebas del módulo DepartamentosController \"after each\" hook in \"Pruebas del módulo DepartamentosController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a5aedbae-6ce0-4125-8bd6-6a7ed5316acc",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todos los departamentos",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe obtener todos los departamentos",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const departamentosSimulados = [\n    { id: 1, nombre: 'Departamento 1' },\n    { id: 2, nombre: 'Departamento 2' }\n];\nqueryStub.resolves({ rows: departamentosSimulados });\nconst res = await chai.request(app).get('/api/departamentos');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(departamentosSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "59fff71a-b661-4044-b7f1-70a11a39c584",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un departamento correctamente",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe crear un departamento correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const departamentoSimulado = { nombre: 'Nuevo Departamento' };\nconst departamentoCreado = { id: 1, ...departamentoSimulado };\nqueryStub.resolves({ rows: [departamentoCreado] });\nconst res = await chai.request(app).post('/api/departamentos').send(departamentoSimulado);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body.nombre).to.equal(departamentoSimulado.nombre);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "747b52bf-2c57-499f-bdb0-c335d965d2bb",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un departamento correctamente",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe actualizar un departamento correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const departamentoSimulado = { nombre: 'Departamento Actualizado' };\nconst departamentoActualizado = { id: 1, ...departamentoSimulado };\nqueryStub.resolves({ rows: [departamentoActualizado] });\nconst res = await chai.request(app).put('/api/departamentos/1').send(departamentoSimulado);\nexpect(res.status).to.equal(200);\nexpect(res.body.id).to.equal(departamentoActualizado.id);\nexpect(res.body.nombre).to.equal(departamentoSimulado.nombre);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "45a8f4b4-f34c-409f-af7a-1c4ed6d2b059",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta actualizar un departamento que no existe",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe devolver un 404 si intenta actualizar un departamento que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const departamentoSimulado = { nombre: 'Departamento Inexistente' };\nqueryStub.resolves({ rows: [] });\nconst res = await chai.request(app).put('/api/departamentos/999').send(departamentoSimulado);\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Departamento no encontrado!');\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "1e9ee16b-fe3e-4928-906a-b3f839811bad",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un departamento correctamente",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe eliminar un departamento correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const departamentoSimulado = { id: 1, nombre: 'Departamento a Eliminar' };\nqueryStub.resolves({ rows: [departamentoSimulado] });\nconst res = await chai.request(app).delete('/api/departamentos/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Departamento eliminado!');\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "c6537679-eef1-436d-8e94-8a084f33fd19",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta eliminar un departamento que no existe",
              "fullTitle": "Pruebas del módulo DepartamentosController Debe devolver un 404 si intenta eliminar un departamento que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/departamentos/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Departamento no encontrado!');\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "ee1905fb-5693-49e8-b792-e5a1eb772552",
              "parentUUID": "bf95ec43-e32e-4779-a502-f60d988c4ab7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59fff71a-b661-4044-b7f1-70a11a39c584",
            "747b52bf-2c57-499f-bdb0-c335d965d2bb",
            "45a8f4b4-f34c-409f-af7a-1c4ed6d2b059",
            "1e9ee16b-fe3e-4928-906a-b3f839811bad",
            "c6537679-eef1-436d-8e94-8a084f33fd19",
            "ee1905fb-5693-49e8-b792-e5a1eb772552"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b1bb4628-3583-4876-86f2-847c73841856",
          "title": "Pruebas del módulo empleados",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\empleados.test.js",
          "file": "\\test\\empleados.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del módulo empleados\"",
              "fullTitle": "Pruebas del módulo empleados \"before each\" hook in \"Pruebas del módulo empleados\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "9f1694d4-791a-425a-87c6-05df44335b0d",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del módulo empleados\"",
              "fullTitle": "Pruebas del módulo empleados \"after each\" hook in \"Pruebas del módulo empleados\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "875b5343-ce8c-433a-8a63-8d603b232ad8",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todos los empleados",
              "fullTitle": "Pruebas del módulo empleados Debe obtener todos los empleados",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const empleadosSimulados = [\n    { id: 1, nombre: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', telefono: '1234567890', correo: 'juan@example.com', idUsuario: 1, idDepartamento: 1 },\n    { id: 2, nombre: 'Maria', apellidoP: 'Lopez', apellidoM: 'Garcia', telefono: '0987654321', correo: 'maria@example.com', idUsuario: 2, idDepartamento: 2 }\n];\n\nqueryStub.resolves({ rows: empleadosSimulados });\nconst res = await chai.request(app).get('/api/empleados');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(empleadosSimulados);",
              "err": {},
              "uuid": "2f2e8eac-ecb0-45f6-ba0c-778780ae2038",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un empleado correctamente",
              "fullTitle": "Pruebas del módulo empleados Debe crear un empleado correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const empleadoSimulado = { nombre: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', telefono: '1234567890', correo: 'juan@example.com', fechanac: '1990-01-01', idDepartamento: 1, idUsuario: 1 };\nconst usuarioSimulado = { usuario: 'juan', contrasenia: '12345', idRol: 2 };\nconst empleadoCreado = { id: 1, ...empleadoSimulado };\nconst usuarioCreado = { id: 1, ...usuarioSimulado };\n\nqueryStub.onFirstCall().resolves({ rows: [usuarioCreado] });\nqueryStub.onSecondCall().resolves({ rows: [empleadoCreado] });\nconst res = await chai.request(app).post('/api/empleados').send({ empleado: empleadoSimulado, usuario: usuarioSimulado });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('empleado');\nexpect(res.body).to.have.property('usuario');\nexpect(res.body.empleado.id).to.equal(1);\nexpect(res.body.usuario.id).to.equal(1);",
              "err": {},
              "uuid": "ea246d51-8389-4a46-b777-532cef69289a",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe obtener un empleado por ID",
              "fullTitle": "Pruebas del módulo empleados Debe obtener un empleado por ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const empleadoSimulado = { id: 1, nombre: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', telefono: '1234567890', correo: 'juan@example.com', idUsuario: 1, idDepartamento: 1 };\n\nqueryStub.resolves({ rows: [empleadoSimulado] });\nconst res = await chai.request(app).get('/api/empleados/1');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(empleadoSimulado);",
              "err": {},
              "uuid": "b245f97f-bd2d-47ea-80df-fa8555606291",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si no encuentra un empleado por ID",
              "fullTitle": "Pruebas del módulo empleados Debe devolver un 404 si no encuentra un empleado por ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).get('/api/empleados/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Empleado no encontrado!');",
              "err": {},
              "uuid": "743a731a-9dbe-4065-b440-5b5c88101c86",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un empleado y su usuario correctamente",
              "fullTitle": "Pruebas del módulo empleados Debe eliminar un empleado y su usuario correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const empleadoSimulado = { id: 1, nombre: 'Juan', apellidoP: 'Perez', apellidoM: 'Gomez', telefono: '1234567890', correo: 'juan@example.com', idUsuario: 1, idDepartamento: 1 };\nconst usuarioSimulado = { id: 1, usuario: 'juan', contrasenia: '12345', idRol: 2 };\n\nqueryStub.onFirstCall().resolves({ rows: [empleadoSimulado] });\nqueryStub.onSecondCall().resolves({ rows: [usuarioSimulado] });\nqueryStub.onThirdCall().resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/empleados/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Empleado y usuario eliminados!');",
              "err": {},
              "uuid": "7267856f-7a1c-4ef5-8221-8e06b80daa8c",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta eliminar un empleado que no existe",
              "fullTitle": "Pruebas del módulo empleados Debe devolver un 404 si intenta eliminar un empleado que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/empleados/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Empleado no encontrado!');",
              "err": {},
              "uuid": "2c5fd7e8-3a59-477b-9094-465d242b50a7",
              "parentUUID": "b1bb4628-3583-4876-86f2-847c73841856",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f2e8eac-ecb0-45f6-ba0c-778780ae2038",
            "ea246d51-8389-4a46-b777-532cef69289a",
            "b245f97f-bd2d-47ea-80df-fa8555606291",
            "743a731a-9dbe-4065-b440-5b5c88101c86",
            "7267856f-7a1c-4ef5-8221-8e06b80daa8c",
            "2c5fd7e8-3a59-477b-9094-465d242b50a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a2e9c446-963d-478e-afb4-116e5dc07e43",
          "title": "Pruebas del módulo marcas",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\marcas.test.js",
          "file": "\\test\\marcas.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del módulo marcas\"",
              "fullTitle": "Pruebas del módulo marcas \"before each\" hook in \"Pruebas del módulo marcas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "2d90d548-0564-4d30-98aa-74a8df353aa7",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del módulo marcas\"",
              "fullTitle": "Pruebas del módulo marcas \"after each\" hook in \"Pruebas del módulo marcas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "0229535a-a0e7-4c07-9652-353459341c83",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todas las marcas",
              "fullTitle": "Pruebas del módulo marcas Debe obtener todas las marcas",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const marcasSimuladas = [\n    { id: 1, nombre: 'Marca A', descripcion: 'Descripcion A' },\n    { id: 2, nombre: 'Marca B', descripcion: 'Descripcion B' }\n];\n\nqueryStub.resolves({ rows: marcasSimuladas });\nconst res = await chai.request(app).get('/api/marcas');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(marcasSimuladas);",
              "err": {},
              "uuid": "e718cd44-8b4b-4fc6-a1ae-5b1a1f386a61",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear una marca correctamente",
              "fullTitle": "Pruebas del módulo marcas Debe crear una marca correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const marcaSimulada = { nombre: 'Marca C', descripcion: 'Descripcion C' };\nconst marcaCreada = { id: 3, ...marcaSimulada };\n\nqueryStub.resolves({ rows: [marcaCreada] });\nconst res = await chai.request(app).post('/api/marcas').send(marcaSimulada);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body.nombre).to.equal('Marca C');\nexpect(res.body.descripcion).to.equal('Descripcion C');",
              "err": {},
              "uuid": "0e307191-61d1-456c-b05e-1ed9ad9dd67f",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar una marca correctamente",
              "fullTitle": "Pruebas del módulo marcas Debe actualizar una marca correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const marcaSimulada = { id: 1, nombre: 'Marca A', descripcion: 'Descripcion A' };\nconst marcaActualizada = { id: 1, nombre: 'Marca A Actualizada', descripcion: 'Descripcion A Actualizada' };\n\nqueryStub.resolves({ rows: [marcaActualizada] });\nconst res = await chai.request(app).put('/api/marcas/1').send(marcaSimulada);\nexpect(res.status).to.equal(200);\nexpect(res.body.nombre).to.equal('Marca A Actualizada');\nexpect(res.body.descripcion).to.equal('Descripcion A Actualizada');",
              "err": {},
              "uuid": "2f289c8f-e297-471f-b00d-f00dd967bd38",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta actualizar una marca que no existe",
              "fullTitle": "Pruebas del módulo marcas Debe devolver un 404 si intenta actualizar una marca que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const marcaSimulada = { nombre: 'Marca Inexistente', descripcion: 'Descripcion Inexistente' };\n\nqueryStub.resolves({ rows: [] });\nconst res = await chai.request(app).put('/api/marcas/999').send(marcaSimulada);\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Marca no encontrada!');",
              "err": {},
              "uuid": "05698a28-1ce7-4b66-88c5-fbb747232823",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar una marca correctamente",
              "fullTitle": "Pruebas del módulo marcas Debe eliminar una marca correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const marcaSimulada = { id: 1, nombre: 'Marca A', descripcion: 'Descripcion A' };\n\nqueryStub.resolves({ rows: [marcaSimulada] });\nconst res = await chai.request(app).delete('/api/marcas/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Marca eliminada!');",
              "err": {},
              "uuid": "d62c4e49-8821-4a6a-aee6-155b78b5a9b9",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta eliminar una marca que no existe",
              "fullTitle": "Pruebas del módulo marcas Debe devolver un 404 si intenta eliminar una marca que no existe",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/marcas/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Marca no encontrada!');",
              "err": {},
              "uuid": "23799188-7902-4917-b244-67c504102003",
              "parentUUID": "a2e9c446-963d-478e-afb4-116e5dc07e43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e718cd44-8b4b-4fc6-a1ae-5b1a1f386a61",
            "0e307191-61d1-456c-b05e-1ed9ad9dd67f",
            "2f289c8f-e297-471f-b00d-f00dd967bd38",
            "05698a28-1ce7-4b66-88c5-fbb747232823",
            "d62c4e49-8821-4a6a-aee6-155b78b5a9b9",
            "23799188-7902-4917-b244-67c504102003"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
          "title": "Pruebas del modulo productos",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\productos.test.js",
          "file": "\\test\\productos.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo productos\"",
              "fullTitle": "Pruebas del modulo productos \"before each\" hook in \"Pruebas del modulo productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "e70a0797-491a-4e54-97ee-bc22a4c55de1",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo productos\"",
              "fullTitle": "Pruebas del modulo productos \"after each\" hook in \"Pruebas del modulo productos\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "e4e9275f-6b9d-4de5-a35f-2c0a3fe99287",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener la lista de productos",
              "fullTitle": "Pruebas del modulo productos Debe obtener la lista de productos",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productosSimulados = [\n    { id: 1, nombreProducto: 'Producto 1', descripcion: 'Descripción 1', precio: 100, stock: 10, idMarca: 1, idCategoria: 1 },\n    { id: 2, nombreProducto: 'Producto 2', descripcion: 'Descripción 2', precio: 150, stock: 5, idMarca: 2, idCategoria: 2 }\n];\n\nqueryStub.resolves({ rows: productosSimulados });\nconst productos = await Productos.obtenerProductos();\nexpect(productos).to.deep.equal(productosSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "1ce07fac-9907-4221-a46a-0d9c073c1a2f",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un arreglo vacío si no hay productos",
              "fullTitle": "Pruebas del modulo productos Debe devolver un arreglo vacío si no hay productos",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productosSimulados = [\n];\n\nqueryStub.resolves({ rows: productosSimulados });\nconst productos = await Productos.obtenerProductos();\nexpect(productos).to.deep.equal(productosSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "9c798503-5b66-4e06-af17-58a2f61c0d02",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un producto correctamente",
              "fullTitle": "Pruebas del modulo productos Debe crear un producto correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosProducto = {\n    nombreProducto: 'Nuevo Producto',\n    descripcion: 'Nueva descripción',\n    precio: 200,\n    stock: 20,\n    idMarca: 1,\n    idCategoria: 2\n};\nconst productoSimulado = {\n    id: 3,\n    ...datosProducto\n};\n\nqueryStub.resolves({ rows: [productoSimulado] });\nconst productoCreado = await Productos.create(datosProducto);\nexpect(productoCreado).to.deep.equal(productoSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "2141af22-dca6-42d2-99a0-ef1c6168b665",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un producto correctamente",
              "fullTitle": "Pruebas del modulo productos Debe actualizar un producto correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    nombreProducto: 'Producto Actualizado',\n    descripcion: 'Descripción Actualizada',\n    precio: 250,\n    stock: 15,\n    idMarca: 1,\n    idCategoria: 2\n};\nconst productoActualizado = {\n    id: 1,\n    ...datosActualizacion\n};\nqueryStub.resolves({ rows: [productoActualizado] });\nconst producto = await Productos.update(1, datosActualizacion);\nexpect(producto).to.deep.equal(productoActualizado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "e017338e-cf43-48f7-8a24-699d8df79180",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un producto correctamente",
              "fullTitle": "Pruebas del modulo productos Debe eliminar un producto correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productoEliminado = { id: 1, deleted_at: '2024-11-12' };\nqueryStub.resolves({ rows: [productoEliminado] });\nconst producto = await Productos.delete(1);\nexpect(producto).to.deep.equal(productoEliminado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "723c7192-4360-40c7-bae3-db8ee8b3a5f0",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe obtener un producto por su ID",
              "fullTitle": "Pruebas del modulo productos Debe obtener un producto por su ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productoSimulado = { id: 1, nombreProducto: 'Producto 1', descripcion: 'Descripción 1', precio: 100, stock: 10, idMarca: 1, idCategoria: 1 };\nqueryStub.resolves({ rows: [productoSimulado] });\nconst producto = await Productos.getProductId(1);\nexpect(producto).to.deep.equal(productoSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "c68e2fea-6313-4c53-88d3-21c8d36e4551",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar el stock de un producto correctamente",
              "fullTitle": "Pruebas del modulo productos Debe actualizar el stock de un producto correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const stockActualizado = { id: 1, stock: 30 };\nqueryStub.resolves({ rows: [stockActualizado] });\nconst producto = await Productos.updateStock(1, 30);\nexpect(producto).to.deep.equal(stockActualizado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "1700ae11-df82-4202-845e-7620faffbd2c",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un producto correctamente",
              "fullTitle": "Pruebas del modulo productos Debe actualizar un producto correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    nombreProducto: 'Producto Actualizado',\n    descripcion: 'Descripción Actualizada',\n    precio: 250,\n    stock: 15,\n    idMarca: 1,\n    idCategoria: 2\n};\n    \nconst productoActualizado = {\n    id: 1,\n    ...datosActualizacion\n};\n    \n\nqueryStub.resolves({ rows: [productoActualizado] });\n    \n\nconst res = await chai.request(app).put('/api/products/1').send(datosActualizacion);\n    \n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(productoActualizado);",
              "err": {},
              "uuid": "abd5c64e-674a-48b7-894a-4348356f613a",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si actualiza un producto que no existe",
              "fullTitle": "Pruebas del modulo productos Debe devolver un 404 si actualiza un producto que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    nombreProducto: 'Producto Inexistente',\n    descripcion: 'Descripción Inexistente',\n    precio: 300,\n    stock: 10,\n    idMarca: 3,\n    idCategoria: 1\n};\n    \n\nqueryStub.resolves({ rows: [] });\n\nconst res = await chai.request(app).put('/api/products/999').send(datosActualizacion);\n    \nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Product no encontrado!');",
              "err": {},
              "uuid": "b846c779-6dd4-4485-8613-3b00a516eaa9",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe obtener un producto por su ID",
              "fullTitle": "Pruebas del modulo productos Debe obtener un producto por su ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productoSimulado = { id: 1, nombreProducto: 'Producto 1', descripcion: 'Descripción 1', precio: 100, stock: 10, idMarca: 1, idCategoria: 1 };\n    \nqueryStub.resolves({ rows: [productoSimulado] });\n    \nconst res = await chai.request(app).get('/api/products/1');\n    \nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(productoSimulado);",
              "err": {},
              "uuid": "7e3c4ddf-eb08-4d91-9aa8-65cd9c63af97",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si busca un producto que no existe",
              "fullTitle": "Pruebas del modulo productos Debe devolver un 404 si busca un producto que no existe",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\n    \nconst res = await chai.request(app).get('/api/products/999');\n    \nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Producto no encontrado!');",
              "err": {},
              "uuid": "d43b7f61-c128-4b52-863f-bed79684c86e",
              "parentUUID": "6a40321f-9e1f-46af-89f1-c5139c87ffe4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ce07fac-9907-4221-a46a-0d9c073c1a2f",
            "9c798503-5b66-4e06-af17-58a2f61c0d02",
            "2141af22-dca6-42d2-99a0-ef1c6168b665",
            "e017338e-cf43-48f7-8a24-699d8df79180",
            "723c7192-4360-40c7-bae3-db8ee8b3a5f0",
            "c68e2fea-6313-4c53-88d3-21c8d36e4551",
            "1700ae11-df82-4202-845e-7620faffbd2c",
            "abd5c64e-674a-48b7-894a-4348356f613a",
            "b846c779-6dd4-4485-8613-3b00a516eaa9",
            "7e3c4ddf-eb08-4d91-9aa8-65cd9c63af97",
            "d43b7f61-c128-4b52-863f-bed79684c86e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7cf41fef-b153-4425-b516-c6a7ec479b76",
          "title": "Pruebas del módulo Roles",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\roles.test.js",
          "file": "\\test\\roles.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del módulo Roles\"",
              "fullTitle": "Pruebas del módulo Roles \"before each\" hook in \"Pruebas del módulo Roles\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "2aef6d49-5954-48f6-b73d-ae32491940fe",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del módulo Roles\"",
              "fullTitle": "Pruebas del módulo Roles \"after each\" hook in \"Pruebas del módulo Roles\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "b4c0e8a0-2741-475e-a5e9-833f4531f130",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener todos los roles",
              "fullTitle": "Pruebas del módulo Roles Debe obtener todos los roles",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rolesSimulados = [\n    { id: 1, rol: 'Administrador' },\n    { id: 2, rol: 'Usuario' }\n];\nqueryStub.resolves({ rows: rolesSimulados });\nconst res = await chai.request(app).get('/api/roles');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(rolesSimulados);",
              "err": {},
              "uuid": "dc1a5f52-16e6-468b-b9d8-8f62abf8272f",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un rol correctamente",
              "fullTitle": "Pruebas del módulo Roles Debe crear un rol correctamente",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nuevoRol = { rol: 'Supervisor' };\nconst rolCreado = { id: 3, ...nuevoRol };\nqueryStub.resolves({ rows: [rolCreado] });\nconst res = await chai.request(app).post('/api/roles').send(nuevoRol);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.deep.equal(rolCreado);",
              "err": {},
              "uuid": "c0a56ae8-89f7-4fbe-96ea-d45928824308",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un rol correctamente",
              "fullTitle": "Pruebas del módulo Roles Debe actualizar un rol correctamente",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rolActualizado = { id: 1, rol: 'Administrador Actualizado' };\nqueryStub.resolves({ rows: [rolActualizado] });\nconst res = await chai.request(app).put('/api/roles/1').send({ rol: 'Administrador Actualizado' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.deep.equal(rolActualizado);",
              "err": {},
              "uuid": "0ab91978-5b8b-4b50-84c4-ec13e913afdf",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta actualizar un rol que no existe",
              "fullTitle": "Pruebas del módulo Roles Debe devolver un 404 si intenta actualizar un rol que no existe",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).put('/api/roles/999').send({ rol: 'Inexistente' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Rol no encontrado!');",
              "err": {},
              "uuid": "8274c9cb-4cdc-4171-a040-dac2b62f4033",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un rol correctamente",
              "fullTitle": "Pruebas del módulo Roles Debe eliminar un rol correctamente",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const rolEliminado = { id: 1, deleted_at: '2024-11-27' };\nqueryStub.resolves({ rows: [rolEliminado] });\nconst res = await chai.request(app).delete('/api/roles/1');\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('Rol eliminado!');",
              "err": {},
              "uuid": "94b0fc6b-eee3-46e7-8a5b-f4057dc36a33",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe devolver un 404 si intenta eliminar un rol que no existe",
              "fullTitle": "Pruebas del módulo Roles Debe devolver un 404 si intenta eliminar un rol que no existe",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.resolves({ rows: [] });\nconst res = await chai.request(app).delete('/api/roles/999');\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Rol no encontrado!');",
              "err": {},
              "uuid": "802c02fc-fa9b-4a09-9061-309fbe487007",
              "parentUUID": "7cf41fef-b153-4425-b516-c6a7ec479b76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc1a5f52-16e6-468b-b9d8-8f62abf8272f",
            "c0a56ae8-89f7-4fbe-96ea-d45928824308",
            "0ab91978-5b8b-4b50-84c4-ec13e913afdf",
            "8274c9cb-4cdc-4171-a040-dac2b62f4033",
            "94b0fc6b-eee3-46e7-8a5b-f4057dc36a33",
            "802c02fc-fa9b-4a09-9061-309fbe487007"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "208c765e-4fc2-469c-ab31-244e92a77927",
          "title": "Pruebas del modulo servicios",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\servicios.test.js",
          "file": "\\test\\servicios.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo servicios\"",
              "fullTitle": "Pruebas del modulo servicios \"before each\" hook in \"Pruebas del modulo servicios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "30f64f80-bc97-4ff9-9928-122891409d08",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo servicios\"",
              "fullTitle": "Pruebas del modulo servicios \"after each\" hook in \"Pruebas del modulo servicios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "4acc90e6-3944-4d7a-a849-34f754d4274d",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener la lista de servicios",
              "fullTitle": "Pruebas del modulo servicios Debe obtener la lista de servicios",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const serviciosSimulados = [\n    { id: 1, nombreServicio: 'Servicio 1', descripcion: 'Descripción 1', precio: 100 },\n    { id: 2, nombreServicio: 'Servicio 2', descripcion: 'Descripción 2', precio: 150 }\n];\nqueryStub.resolves({ rows: serviciosSimulados });\nconst servicios = await Servicios.obtenerServicios();\nexpect(servicios).to.deep.equal(serviciosSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "c51c1def-43b0-468d-98b2-ca99efa42b81",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un servicio correctamente",
              "fullTitle": "Pruebas del modulo servicios Debe crear un servicio correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosServicio = {\n    nombreServicio: 'Nuevo Servicio',\n    descripcion: 'Descripción Nueva',\n    precio: 200\n};\nconst servicioSimulado = { id: 3, ...datosServicio };\nqueryStub.resolves({ rows: [servicioSimulado] });\nconst servicioCreado = await Servicios.create(datosServicio);\nexpect(servicioCreado).to.deep.equal(servicioSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "1f9359a0-7fcf-444d-be4f-bb050d0757c2",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un servicio correctamente",
              "fullTitle": "Pruebas del modulo servicios Debe actualizar un servicio correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    nombreServicio: 'Servicio Actualizado',\n    descripcion: 'Descripción Actualizada',\n    precio: 250\n};\nconst servicioActualizado = { id: 1, ...datosActualizacion };\nqueryStub.resolves({ rows: [servicioActualizado] });\nconst servicio = await Servicios.update(1, datosActualizacion);\nexpect(servicio).to.deep.equal(servicioActualizado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "294cca20-6851-4ed6-a338-b2785c041625",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un servicio correctamente",
              "fullTitle": "Pruebas del modulo servicios Debe eliminar un servicio correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const servicioEliminado = { id: 1, deleted_at: '2024-11-12' };\nqueryStub.resolves({ rows: [servicioEliminado] });\nconst servicio = await Servicios.delete(1);\nexpect(servicio).to.deep.equal(servicioEliminado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "9997d093-979d-4bd2-a49d-303276117e30",
              "parentUUID": "208c765e-4fc2-469c-ab31-244e92a77927",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c51c1def-43b0-468d-98b2-ca99efa42b81",
            "1f9359a0-7fcf-444d-be4f-bb050d0757c2",
            "294cca20-6851-4ed6-a338-b2785c041625",
            "9997d093-979d-4bd2-a49d-303276117e30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
          "title": "Pruebas del modulo usuarios",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\usuarios.test.js",
          "file": "\\test\\usuarios.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo usuarios\"",
              "fullTitle": "Pruebas del modulo usuarios \"before each\" hook in \"Pruebas del modulo usuarios\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "204d77cb-5c88-48f8-8b6e-f7d32c262359",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo usuarios\"",
              "fullTitle": "Pruebas del modulo usuarios \"after each\" hook in \"Pruebas del modulo usuarios\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "8b11b99c-6271-4356-91ce-10a02318496e",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe obtener la lista de usuarios",
              "fullTitle": "Pruebas del modulo usuarios Debe obtener la lista de usuarios",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuariosSimulados = [\n    { id: 1, usuario: 'emmanuel', contrasenia: 'contraseña1', idRol: 1 },\n    { id: 2, usuario: 'jaime', contrasenia: 'contraseña2', idRol: 2 }\n];\nqueryStub.resolves({ rows: usuariosSimulados });\nconst usuarios = await Usuarios.obtenerUsuarios();\nexpect(usuarios).to.deep.equal(usuariosSimulados);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "94dcdecd-7444-4c85-8a30-295979e60d54",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe crear un usuario correctamente",
              "fullTitle": "Pruebas del modulo usuarios Debe crear un usuario correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosUsuario = {\n    usuario: 'nuevoemmanuel',\n    contrasenia: 'nuevaContraseña',\n    idRol: 2\n};\nconst usuarioSimulado = {\n    id: 3,\n    ...datosUsuario\n};\nqueryStub.resolves({ rows: [usuarioSimulado] });\nconst usuarioCreado = await Usuarios.create(datosUsuario);\nexpect(usuarioCreado).to.deep.equal(usuarioSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "dce72c17-4b8c-44d3-bd78-228bfe48da36",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe actualizar un usuario correctamente",
              "fullTitle": "Pruebas del modulo usuarios Debe actualizar un usuario correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const datosActualizacion = {\n    usuario: 'emmanuelActualizado',\n    contrasenia: 'contraseñaActualizada',\n    idRol: 2\n};\nconst usuarioActualizado = {\n    id: 1,\n    ...datosActualizacion\n};\nqueryStub.resolves({ rows: [usuarioActualizado] });\nconst usuario = await Usuarios.update(1, datosActualizacion);\nexpect(usuario).to.deep.equal(usuarioActualizado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "1fec2408-49ae-4314-9fcf-6ae5b112abe9",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe eliminar un usuario correctamente",
              "fullTitle": "Pruebas del modulo usuarios Debe eliminar un usuario correctamente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioEliminado = { id: 1, deleted_at: '2024-11-12' };\nqueryStub.resolves({ rows: [usuarioEliminado] });\nconst usuario = await Usuarios.delete(1);\nexpect(usuario).to.deep.equal(usuarioEliminado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "fcc1257f-7414-4bc4-ab89-2e421a44084e",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debe obtener un usuario por su ID",
              "fullTitle": "Pruebas del modulo usuarios Debe obtener un usuario por su ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioSimulado = { id: 1, usuario: 'jaime', contrasenia: 'contraseña1', idRol: 1 };\nqueryStub.resolves({ rows: [usuarioSimulado] });\nconst usuario = await Usuarios.findById(1);\nexpect(usuario).to.deep.equal(usuarioSimulado);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "6137cc82-f8c4-4665-973b-e9350105eb07",
              "parentUUID": "2036eeae-d028-483b-9cd7-dfdec7b7dea0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94dcdecd-7444-4c85-8a30-295979e60d54",
            "dce72c17-4b8c-44d3-bd78-228bfe48da36",
            "1fec2408-49ae-4314-9fcf-6ae5b112abe9",
            "fcc1257f-7414-4bc4-ab89-2e421a44084e",
            "6137cc82-f8c4-4665-973b-e9350105eb07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b0f5206-5c60-4987-9a04-42f55be19a5c",
          "title": "Pruebas del modulo Ventas",
          "fullFile": "C:\\Users\\danie\\OneDrive\\Escritorio\\testfinal\\api\\test\\ventas.test.js",
          "file": "\\test\\ventas.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Pruebas del modulo Ventas\"",
              "fullTitle": "Pruebas del modulo Ventas \"before each\" hook in \"Pruebas del modulo Ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub = sinon.stub(pool, 'query');",
              "err": {},
              "uuid": "e03472fd-a69d-40ad-9fe0-e0391c527ca4",
              "parentUUID": "4b0f5206-5c60-4987-9a04-42f55be19a5c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Pruebas del modulo Ventas\"",
              "fullTitle": "Pruebas del modulo Ventas \"after each\" hook in \"Pruebas del modulo Ventas\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "queryStub.restore();",
              "err": {},
              "uuid": "f3e00bac-34e0-4d09-b797-817812aadee7",
              "parentUUID": "4b0f5206-5c60-4987-9a04-42f55be19a5c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debe crear una venta correctamente",
              "fullTitle": "Pruebas del modulo Ventas Debe crear una venta correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const precioTotal = 1000;\nconst ventaSimulada = {\n    id: 1,\n    precioTotal\n};\nqueryStub.resolves({ rows: [ventaSimulada] });\nconst venta = await Ventas.create(precioTotal);\nexpect(venta).to.deep.equal(ventaSimulada);\nexpect(queryStub.calledOnce).to.be.true;",
              "err": {},
              "uuid": "40278fa7-d88d-4942-b8e3-69840a53dc0f",
              "parentUUID": "4b0f5206-5c60-4987-9a04-42f55be19a5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40278fa7-d88d-4942-b8e3-69840a53dc0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}